{
  "_args": [
    [
      {
        "raw": "codeceptjs@github:imvetri/CodeceptJS",
        "scope": null,
        "escapedName": "codeceptjs",
        "name": "codeceptjs",
        "rawSpec": "github:imvetri/CodeceptJS",
        "spec": "github:imvetri/CodeceptJS",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:imvetri/CodeceptJS.git",
          "sshUrl": "git+ssh://git@github.com/imvetri/CodeceptJS.git",
          "httpsUrl": "git+https://github.com/imvetri/CodeceptJS.git",
          "gitUrl": "git://github.com/imvetri/CodeceptJS.git",
          "shortcut": "github:imvetri/CodeceptJS",
          "directUrl": "https://raw.githubusercontent.com/imvetri/CodeceptJS/master/package.json"
        }
      },
      "/Users/shanmuv/Desktop/Training/codeceptSample"
    ]
  ],
  "_from": "imvetri/CodeceptJS",
  "_id": "codeceptjs@0.5.1",
  "_inCache": true,
  "_location": "/codeceptjs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "codeceptjs@github:imvetri/CodeceptJS",
    "scope": null,
    "escapedName": "codeceptjs",
    "name": "codeceptjs",
    "rawSpec": "github:imvetri/CodeceptJS",
    "spec": "github:imvetri/CodeceptJS",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:imvetri/CodeceptJS.git",
      "sshUrl": "git+ssh://git@github.com/imvetri/CodeceptJS.git",
      "httpsUrl": "git+https://github.com/imvetri/CodeceptJS.git",
      "gitUrl": "git://github.com/imvetri/CodeceptJS.git",
      "shortcut": "github:imvetri/CodeceptJS",
      "directUrl": "https://raw.githubusercontent.com/imvetri/CodeceptJS/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/imvetri/CodeceptJS.git#0c2a17f4267071c06c4b699958e49cef1a5f08d2",
  "_shasum": "8d22cc61b0d0d92528e45e7dfe807173b8567e19",
  "_shrinkwrap": null,
  "_spec": "codeceptjs@github:imvetri/CodeceptJS",
  "_where": "/Users/shanmuv/Desktop/Training/codeceptSample",
  "author": {
    "name": "DavertMik",
    "email": "davert@codegyre.com",
    "url": "http://codegyre.com"
  },
  "bin": {
    "codeceptjs": "./bin/codecept.js"
  },
  "bugs": {
    "url": "https://github.com/codeception/codeceptjs/issues"
  },
  "dependencies": {
    "chalk": "^1.1.3",
    "co": "^4.6.0",
    "commander": "^2.9.0",
    "escape-string-regexp": "^1.0.3",
    "get-parameter-names": "^0.3.0",
    "glob": "^6.0.1",
    "inquirer": "^0.11.0",
    "mkdirp": "^0.5.1",
    "mocha": "^3.1.2",
    "requireg": "^0.1.5"
  },
  "description": "Modern Era Aceptance Testing Framework for NodeJS",
  "devDependencies": {
    "chai": "^3.4.1",
    "chai-as-promised": "^5.2.0",
    "co-mocha": "^1.1.2",
    "documentation": "^4.0.0-beta1",
    "git-guppy": "^1.0.1",
    "gulp": "^3.6.0",
    "gulp-coveralls": "^0.1.0",
    "gulp-documentation": "^2.2.0",
    "gulp-eslint": "^3.0.0",
    "gulp-exclude-gitignore": "^1.0.0",
    "gulp-gitmodified": "^1.1.0",
    "gulp-if": "^2.0.2",
    "gulp-istanbul": "^0.9.0",
    "gulp-mocha": "^2.0.0",
    "gulp-mustache": "^2.2.0",
    "gulp-plumber": "^1.0.0",
    "guppy-pre-commit": "^0.4.0",
    "nightmare": "^2.5.2",
    "nightmare-upload": "^0.1.1",
    "protractor": ">4.0.9 <6.0",
    "selenium-webdriver": "^2.53.1",
    "sinon": "^1.17.2",
    "webdriverio": ">3.4.0 <5.0.0"
  },
  "es6": true,
  "files": [
    "bin",
    "lib",
    "translations"
  ],
  "gitHead": "0c2a17f4267071c06c4b699958e49cef1a5f08d2",
  "homepage": "http://codecept.io",
  "keywords": [
    "tdd",
    "bdd",
    "testing",
    "acceptance"
  ],
  "license": "MIT",
  "main": "lib/codecept.js",
  "name": "codeceptjs",
  "optionalDependencies": {},
  "readme": "# CodeceptJS [![NPM version][npm-image]][npm-url] [![Build Status](https://travis-ci.org/Codeception/CodeceptJS.svg?branch=master)](https://travis-ci.org/Codeception/CodeceptJS) [![Join the chat at https://gitter.im/Codeception/CodeceptJS](https://badges.gitter.im/Codeception/CodeceptJS.svg)](https://gitter.im/Codeception/CodeceptJS?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nReference: [Helpers API](https://github.com/Codeception/CodeceptJS/blob/master/docs) | [Demo](https://github.com/Codeception/codeceptjs-demo)\n\n## Modern Era Acceptance Testing Framework for NodeJS\n\nCodeceptJS is a new testing framework for end-to-end testing with WebDriver (or others).\nIt abstracts browser interaction to simple steps which is written from a user perspective.\nA simple test that verifies that \"Welcome\" text is present on a main page of a site will look like:\n\n```js\nFeature('CodeceptJS demo');\n\nScenario('check Welcome page on site', (I) => {\n  I.amOnPage('/');\n  I.see('Welcome');\n});\n```\n\nCodeception tests are:\n\n* **Synchronous**. You don't need to care about callbacks, or promises, test scenarios are linear, your test should be too.\n* Written from **user's perspective**. Every action is a method of `I`. That makes test easy to read, write and maintain even for non-tech persons.\n* Backend **API agnostic**. We don't know which WebDriver implementation is running this test. We can easily switch from WebDriverIO to Protractor or PhantomJS.\n\nCodeception uses **Helper** modules to provide actions to `I` object. Currently CodeceptJS has these helpers:\n\n* [**WebDriverIO**](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/WebDriverIO.md) - wrapper on top of Selenium bindings library [WebDriverIO](http://webdriver.io/)\n* [**Protractor**](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/Protractor.md) - helper enpowered by [Protractor](http://protractortest.org/) framework for AngularJS testing\n* [**Nightmare**](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/Nightmare.md) - helper which for testing web applications indi Electron  using NightmareJS.\n* [**SeleniumWebdriver**](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/SeleniumWebdriver.md) - helper which for selenium testing using official Selenium Webdriver JS bindings.\n* [**FileSystem**](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/FileSystem.md) - simple helper for testing filesystem.\n\nAnd more to come...\n\n## Why CodeceptJS?\n\nCodeceptJS is a successor of [Codeception](http://codeception.com), a popular full-stack testing framework for PHP.\nWith CodeceptJS your scenario-driven functional and acceptance tests will be as simple and clean as they can be.\nYou don't need to worry about asynchronous nature of NodeJS or about various APIs of Selenium, PhantomJS, Protractor, etc,\nas CodeceptJS unifies them and makes them work as they were synchronous.\n\n## Features\n\n* Based on [Mocha](https://mochajs.org/) testing framework.\n* Designed for scenario driven acceptance testing in BDD-style\n* Uses ES6 natively without transpiler.\n* Also plays nice with TypeScript.\n* Selenium WebDriver integration using [webdriverio](http://webdriver.io).\n* Smart locators: use names, labels, matching text, CSS or XPath to locate elements.\n* Interactive debugging shell: pause test at any point and try different commands in a browser.\n* Easily create tests, pageobjects, stepobjects with CLI generators.\n\n\n## Install\n\n```sh\n$ npm install -g codeceptjs\n```\n\nMove to directory where you'd like to have your tests (and codeceptjs config) stored, and run\n\n```\ncodeceptjs init\n```\n\nto create and configure test environment. It is recommended to select WebDriverIO from the list of helpers,\nif you need to write Selenium WebDriver tests.\n\nAfter that create your first test by executing:\n\n```\ncodeceptjs generate:test\n```\n\nNow test is created and can be executed with\n\n```\ncodeceptjs run\n```\n\nIf you want to write your tests using TypeScript just generate standard Type Definitions by executing:\n\n```\ncodeceptjs def .\n```\n\nLater you can even automagically update Type Definitions to include your own custom [helpers methods](docs/helpers.md).\n\n## Usage\n\nLearn CodeceptJS by examples. Let's assume we have CodeceptJS installed and WebDriverIO helper enabled.\n\n### Basics\n\nLet's see how we can handle basic form testing:\n```js\nFeature('CodeceptJS Demonstration');\n\nScenario('test some forms', (I) => {\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation');\n  I.fillField('Email', 'hello@world.com');\n  I.fillField('Password', '123456');\n  I.checkOption('Active');\n  I.checkOption('Male');\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n```\n\nAll actions are performed by I object; assertions functions start with `see` function.\nIn this examples all methods of `I` are taken from WebDriverIO helper, see [reference](https://github.com/Codeception/CodeceptJS/blob/master/docs/helpers/WebDriverIO.md) to learn how to use them.\n\nLet's execute this test with `run` command. Additional option `--steps` will show us the running process. We recommend use `--steps` or `--debug` during development.\n\n```\ncodeceptjs run --steps\n```\n\nThis will produce an output:\n\n```\nCodeceptJS Demonstration --\n test some forms\n • I am on page \"http://simple-form-bootstrap.plataformatec.com.br/documentation\"\n • I fill field \"Email\", \"hello@world.com\"\n • I fill field \"Password\", \"123456\"\n • I check option \"Active\"\n • I check option \"Male\"\n • I click \"Create User\"\n • I see \"User is valid\"\n • I dont see in current url \"/documentation\"\n ✓ OK in 17752ms\n```\n\nCodeceptJS has an ultimate feature to help you develop and debug you test.\nYou can **pause execution of test in any place and use interactive shell** to try different actions and locators.\nJust add `pause()` call at any place in a test and run it.\n\nInteractive shell can be started outside test context by running:\n\n```\ncodeceptjs shell\n```\n\n### Actions\n\nWe filled form with `fillField` methods, which located form elements by their label.\nThe same way you can locate element by name, CSS or XPath locators in tests:\n\n```js\n// by name\nI.fillField('user_basic[email]', 'hello@world.com');\n// by CSS\nI.fillField('#user_basic_email', 'hello@world.com');\n// don't make us guess locator type, specify it\nI.fillField({css: '#user_basic_email'}, 'hello@world.com');\n```\n\nOther methods like `checkOption`, and `click` work in a similar manner. They can take labels or CSS or XPath locators to find elements to interact.\n\n### Assertions\n\nAssertions start with `see` or `dontSee` prefix. In our case we are asserting that string 'User is valid' is somewhere in a webpage.\nHowever, we can narrow the search to particular element by providing a second parameter:\n\n```js\nI.see('User is valid');\n// better to specify context:\nI.see('User is valid', '.alert-success');\n```\n\nIn this case 'User is valid' string will be searched only inside elements located by CSS `.alert-success`.\n\n### Grabbers\n\nIn case you need to return a value from a webpage and use it directly in test, you should use methods with `grab` prefix.\nThey are expected to be used inside a generator functions, and their results will be available in test:\n\n```js\nvar assert = require('assert');\n\nFeature('CodeceptJS Demonstration');\n\nScenario('test page title', function*(I) {\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation');\n  var title = yield I.grabTitle();\n  assert.equal(title, 'Example application with SimpleForm and Twitter Bootstrap');\n});\n```\n\nThe same way you can grab text, attributes, or form values and use them in next test steps.\n\n### Before/After\n\nCommon preperation steps like opening a web page, logging in a user, can be placed in `Before` or `Background`:\n\n```js\nFeature('CodeceptJS Demonstration');\n\nBefore((I) => { // or Background\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation');\n});\n\nScenario('test some forms', (I) => {\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n\nScenario('test title', (I) => {\n  I.seeInTitle('Example application');\n});\n```\n\n## PageObjects\n\nCodeceptJS provides the most simple way to create and use page objects in your test.\nYou can create one by running\n\n```\ncodeceptjs generate pageobject\n```\n\nIt will create a page object file for you and add it to config.\nLet's assume we created one named `docsPage`:\n\n```js\n'use strict';\n\nlet I;\n\nmodule.exports = {\n\n  _init() {\n    I = actor();\n  },\n\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  }\n}\n```\n\nYou can easily inject it to test by providing its name in test arguments:\n\n```js\nFeature('CodeceptJS Demonstration');\n\nBefore((I) => { // or Background\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation');\n});\n\nScenario('test some forms', (I, docsPage) => {\n  docsPage.sendForm('hello@world.com','123456');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n```\n\n## Current State\n\nCodeceptJS is in its early days. Any feedback, issues, and pull requests are welcome. Try it, and if you like it - help us make it better!\n\n## License\n\nMIT © [DavertMik](http://codegyre.com)\n\n\n[npm-image]: https://badge.fury.io/js/codeceptjs.svg\n[npm-url]: https://npmjs.org/package/codeceptjs\n[travis-image]: https://travis-ci.org/Codeception/codeceptjs.svg?branch=master\n[travis-url]: https://travis-ci.org/Codeception/codeceptjs\n[daviddm-image]: https://david-dm.org/Codeception/codeceptjs.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/Codeception/codeceptjs\n[coveralls-image]: https://coveralls.io/repos/Codeception/codeceptjs/badge.svg\n[coveralls-url]: https://coveralls.io/r/Codeception/codeceptjs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/codeception/codeceptjs.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp"
  },
  "version": "0.5.1"
}
